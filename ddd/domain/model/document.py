# ##############################################################################
#
#  OSIS stands for Open Student Information System. It's an application
#  designed to manage the core business of higher education institutions,
#  such as universities, faculties, institutes and professional schools.
#  The core business involves the administration of students, teachers,
#  courses, programs and so on.
#
#  Copyright (C) 2015-2025 Universit√© catholique de Louvain (http://www.uclouvain.be)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  A copy of this license - GNU General Public License - is available
#  at the root of the source code of this program.  If not,
#  see http://www.gnu.org/licenses/.
#
# ##############################################################################

import datetime
from typing import List, Optional

import attr
from django.utils.translation import gettext_lazy as _

from base.models.utils.utils import ChoiceEnum
from osis_common.ddd import interface
from parcours_doctoral.ddd.domain.model.parcours_doctoral import (
    ParcoursDoctoralIdentity,
)


class TypeDocument(ChoiceEnum):
    LIBRE = _('Free')
    NON_LIBRE = _('Not free')
    SYSTEME = _('Generated by the system')


@attr.dataclass(frozen=True, slots=True, eq=False)
class DocumentIdentity(interface.EntityIdentity):
    identifiant: str
    parcours_doctoral_id: ParcoursDoctoralIdentity

    def __eq__(self, other):
        return self.identifiant == other.identifiant and self.parcours_doctoral_id == other.parcours_doctoral_id


@attr.dataclass(slots=True)
class Document(interface.Entity):
    entity_id: DocumentIdentity
    uuids_documents: List[str]
    type: TypeDocument
    modifie_le: datetime
    auteur: Optional[str]
    libelle: str = ''

    def modifier(self, uuids_documents: List[str], auteur: Optional[str] = None):
        self.uuids_documents = uuids_documents
        self.modifie_le = datetime.datetime.now()
        self.auteur = auteur

    def renommer(self, nouveau_libelle):
        self.libelle = nouveau_libelle
